<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ComponentRegistrationContext_InterceptionNotActivated" xml:space="preserve">
    <value>Interception was not activated on the module with type '{0}'. Activate interception in the module before adding a behaviour to components.</value>
  </data>
  <data name="DependencyInjectionContext_IntoPropertyExpressionNotWritable" xml:space="preserve">
    <value>The property '{0}' of type '{1}' has no setter defined.</value>
  </data>
  <data name="DependencyInjectionContext_NoMemberAccessInTargetExpression" xml:space="preserve">
    <value>The target given to the IntoProperty method does not describe a property.</value>
  </data>
  <data name="InjectionModule_AlreadyResolved" xml:space="preserve">
    <value>The module with type '{0}' was already resolved. Please avoid multiple resolutions of the same module.</value>
  </data>
  <data name="InjectionModule_CannotRegisterPropertyOrMethodsWhichAreNotMembersOfTheModule" xml:space="preserve">
    <value>The property or method '{0}' of module with type '{1}' could not be registered. Only direct properties and methods of a module can be registered.</value>
  </data>
  <data name="InjectionModule_CreateInstanceBeforeResolve" xml:space="preserve">
    <value>The factory method '{0}' of module with type '{1}' was called before the module was resolved. Please resolve the module before creating any instances via factories.</value>
  </data>
  <data name="InjectionModule_FactoryMethodNotRegistered" xml:space="preserve">
    <value>The method '{0}' of module with type '{1}' is not registered as a factory method. Could not create instance of requested type.</value>
  </data>
  <data name="InjectionModule_FactoryMethodsWithParametersNotSupportedYet" xml:space="preserve">
    <value>The method '{0}' of module with type '{1}' can not be registered as a factory method. Only parameterless methods can currently be registered.</value>
  </data>
  <data name="InjectionModule_InvalidProperty" xml:space="preserve">
    <value>The module with type '{0}' has invalid properties that are neither private nor public properties. Declare them as public via the module interface or apply the PrivateComponent attribute. 
The properties are: '{1}'</value>
  </data>
  <data name="InjectionModule_MethodNotQualifiedForPrivateRegistration" xml:space="preserve">
    <value>The method '{0}' of module with type '{1}' is not qualified to be a private factory. Either it is a public factory or it was not marked with the PrivateFactoryAttribute.</value>
  </data>
  <data name="InjectionModule_ModulesMustHaveAnInterface" xml:space="preserve">
    <value>The module with type '{0}' does not possess an interface. Please provide one in the generic parameters of InjectionModule and implement it in your module.</value>
  </data>
  <data name="InjectionModule_NeitherPropertyNorMethodExpression" xml:space="preserve">
    <value>The expression '{1}' describes neither a property or method of the module with type '{0}'.</value>
  </data>
  <data name="InjectionModule_PropertyNotQualifiedForPrivateRegistration" xml:space="preserve">
    <value>The property '{0}' of module with type '{1}' is not qualified to be a private component. Either it is a public component or it was not marked with the PrivateComponentAttribute.</value>
  </data>
  <data name="MemberChainEvaluator_MemberChainNotContinuous" xml:space="preserve">
    <value>The expression '{0}' is not a continuous chain of member accesses.</value>
  </data>
  <data name="MemberChainEvaluator_RootTypeMismatch" xml:space="preserve">
    <value>The expression '{0}' has not the correct root type.</value>
  </data>
  <data name="MethodCallArgumentNotSupported" xml:space="preserve">
    <value>The expression '{0}' is currently not supported as a method call argument.</value>
  </data>
  <data name="ModuleResolver_MissingPropertyRegistration" xml:space="preserve">
    <value>The property '{0}' of module with type '{1}' could not be resolved. Neither the module nor the registry of the module contained the component. Did you inject a property that was neither a member of the modules interface nor marked with the PrivateComponentAttribute? Did you forget to put the component into the registry or setting the registry of the module?</value>
  </data>
  <data name="ModuleResolver_PropertyIsNoInterface" xml:space="preserve">
    <value>The property '{0}' of module with type '{1}' has no interface. Please make sure that all properties of your modules are implemented with interface types.</value>
  </data>
  <data name="ModuleResolver_PropertyWithoutExternalAttribute" xml:space="preserve">
    <value>The property '{0}' of module with type '{1}' is already set before resolving it despite not being marked with ExternalComponentAttribute. Please set the ExternalComponentAttribute if the property is set outside the resolution process of the module itself.</value>
  </data>
  <data name="Module_RegistrationHookDoesNotApply" xml:space="preserve">
    <value>The registration hook of type '{1}' can not be added to the module of type '{0}' because it does not apply to it.</value>
  </data>
  <data name="RegistrationContext_ConstructorAlreadyCalled" xml:space="preserve">
    <value>The constructor of component '{0}' in module of type '{1}' was already injected before.</value>
  </data>
  <data name="RegistryModule_TypeNotRegistered" xml:space="preserve">
    <value>The registry does not contain a registration for the type '{0}'.</value>
  </data>
  <data name="Registry_AlreadyComposedNoFurtherCatalogs" xml:space="preserve">
    <value>The registry is already composed, you can not add further catalogs to it.</value>
  </data>
  <data name="ServiceLocator_CouldNotFindInstanceRegistration" xml:space="preserve">
    <value>The instance with key '{0}' of type '{1}' could no be found by the service locator.</value>
  </data>
  <data name="ServiceLocator_MultipleRegistrationsFound" xml:space="preserve">
    <value>There are multiple registrations of type '{1}' in the service locator.</value>
  </data>
  <data name="TypeExtensions_NoPropertySetterFound" xml:space="preserve">
    <value>The property '{0}' of type  '{1}' does not have a setter anywhere in the module inheritance chain.</value>
  </data>
</root>